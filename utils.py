"""
utils.py - Utility functions

Common utility functions used throughout the project:
1. timer: Function execution time measurement decorator
2. display_image: Candlestick chart image visualization function  
"""
from __init__ import *


@contextmanager 
def timer(name: str, _align): 
    """
    Context manager decorator for measuring and outputting function execution time
    
    Usage:
        @timer('Load data', '10')
        def load_data():
            # Time-consuming operation
            pass
    
    Args:
        name (str): Task name (to be displayed in output)
        _align (str): Width value for output alignment
        
    Output example:
        [ Load data ] | 2023-04-27 15:30:45 Done | Using 12.345 seconds
    """
    s = time.time()                           # Record start time
    yield                                     # Actual function execution here
    elapsed = time.time() - s                 # Calculate execution time
    print(f"{ '[' + name + ']' :{_align}} | {time.strftime('%Y-%m-%d %H:%M:%S')} Done | Using {elapsed: .3f} seconds")
    

def display_image(entry):
    """
    Function to visualize candlestick chart images and labels
    
    Displays image data generated by dataset.py using matplotlib
    to visually verify that candlestick charts are correctly generated.
    
    Args:
        entry (list): Data in format [image_array, ret5_label, ret20_label]
                     - image_array: numpy 2D array (height x width)
                     - ret5_label: 5-day return label (0: down, 1: up)
                     - ret20_label: 20-day return label (0: down, 1: up)
    
    Output:
        Matplotlib window with grayscale candlestick chart image + label information
    """
    # Validate input data format
    assert (type(entry) == list) and (len(entry) == 3), "Type error, expected a list with length of 3"
    
    plt.figure                                        # Create new graph window
    plt.imshow(entry[0], cmap=plt.get_cmap('gray'))  # Display as grayscale image
    plt.ylim((0,entry[0].shape[0]-1))                # Set Y-axis range (image height)
    plt.xlim((0,entry[0].shape[1]-1))                # Set X-axis range (image width)
    plt.title(f'ret5: {entry[1]}\nret20: {entry[2]}')  # Display label information as title
    


